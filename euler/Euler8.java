package euler;
import java.util.Scanner;

/**
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
What is the value of this product?

 */

public class Euler8
{
	public static void main(String[] args)
	{
		int product = 1;
		int biggestProduct = 0;
		
		String bigString = "73167176531330624919225119674426574742355349194"
				+ "9349698352031277450632623957831801698480186947885184385861560789112"
				+ "9494954595017379583319528532088055111254069874715852386305071569329"
				+ "0963295227443043557668966489504452445231617318564030987111217223831"
				+ "1362229893423380308135336276614282806444486645238749303589072962904"
				+ "9156044077239071381051585930796086670172427121883998797908792274921"
				+ "9016997208880937766572733300105336788122023542180975125454059475224"
				+ "3525849077116705560136048395864467063244157221553975369781797784617"
				+ "4064955149290862569321978468622482839722413756570560574902614079729"
				+ "6865241453510047482166370484403199890008895243450658541227588666881"
				+ "1642717147992444292823086346567481391912316282458617866458359124566"
				+ "5294765456828489128831426076900422421902267105562632111110937054421"
				+ "7506941658960408071984038509624554443629812309878799272442849091888"
				+ "4580156166097919133875499200524063689912560717606058861164671094050"
				+ "7754100225698315520005593572972571636269561882670428252483600823257"
				+ "530420752963450";
		
		for(int i = 0; i < bigString.length(); i++)	
		{
			if(bigString.charAt(i) == '9' && i < (bigString.length() - 14))
			{
				String substring = bigString.substring(i, i+13);
				product = 1;
				
				for(char substringChar : substring.toCharArray())
				{
					product = product * Character.getNumericValue(substringChar);;
				}
			 
				if(biggestProduct < product)
				{
					biggestProduct = product;
				}
			}
		}
		System.out.println(biggestProduct);
	}
}
